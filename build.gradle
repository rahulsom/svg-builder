import com.github.rahulsom.svgbuilder.Converter
import com.github.rahulsom.svgbuilder.GroovyNewifyBuilder

plugins {
    id "com.gradle.build-scan" version "2.3"
    id "me.champeau.buildscan-recipes" version "0.2.3"

    id 'java'
    id 'groovy'
    id "org.jetbrains.kotlin.jvm" version "1.3.41"

    id "nebula.info" version "5.0.3"
    id "nebula.release" version "11.0.0"
    id "com.bmuschko.nexus" version "2.3.1"
    id 'org.unbroken-dome.xjc' version '1.4.3'
    id "io.codearte.nexus-staging" version "0.21.0"
}

apply from: 'gradle/publishing.gradle'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main {
        groovy.srcDir "build/groovysupport/generated-sources"
        kotlin.srcDir "build/xjc/generated-sources"
    }
}

dependencies {
    xjcClasspath 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
    xjcClasspath 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.1.0'

    compileOnly 'org.codehaus.groovy:groovy-all:2.5.7'

    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.41"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.40"
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

xjcGenerate {
    source = fileTree('build/schemas') { include '*.xsd' }
    bindingFiles = fileTree('src/main/jaxb') { include '*.xjb' }
    extraArgs = ['-Xfluent-api', '-Xannotate']
}

task download() {
    doFirst {
        if (!file("build/schemas/svg.dtd").exists()) {
            file("$buildDir/schemas").mkdirs()
            file("build/schemas/svg.dtd").text =
                    new URL('https://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat-20030114.dtd').text
        }
        new Converter().convert()
    }
}
xjcGenerate.dependsOn 'download'
xjcGenerate.doLast {
    new GroovyNewifyBuilder().createFile()
}
compileJava.dependsOn 'xjcGenerate'
compileKotlin.dependsOn 'xjcGenerate'
compileTestGroovy.doFirst {
    copy {
        from "build/classes/kotlin/test"
        into "build/classes/java/test"
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

buildScanRecipes {
    recipes 'git-commit', 'git-status', 'travis-ci', 'gc-stats'
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}
