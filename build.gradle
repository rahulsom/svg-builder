import com.github.rahulsom.svgbuilder.Converter
import com.github.rahulsom.svgbuilder.GroovyNewifyBuilder
import com.github.rahulsom.waena.WaenaExtension

plugins {
  id("java")
  id("groovy")
  id("org.jetbrains.kotlin.jvm").version("2.2.10")
  id("com.github.rahulsom.waena.root").version("0.15.1")
  id("com.github.rahulsom.waena.published").version("0.15.1")
}

contacts {
  validateEmails = true
  addPerson("rahulsom@noreply.github.com") {
    moniker("Rahul Somasunderam")
    roles("owner")
    github("https://github.com/rahulsom")
  }
}

group = "com.github.rahulsom"
description = "A library for building SVG diagrams"

repositories {
  mavenCentral()
}

sourceSets {
  main {
    groovy.srcDir("build/groovysupport/generated-sources")
    java.srcDir("build/generated/sources/xjc/java/main")
  }
}

configurations {
  xjcTool
}

dependencies {
  xjcTool("org.glassfish.jaxb:jaxb-xjc:4.0.5")
  xjcTool("org.glassfish.jaxb:jaxb-runtime:4.0.5")
  xjcTool("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
  xjcTool("javax.xml.bind:jaxb-api:2.3.1")
  xjcTool("org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0")
  xjcTool("org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.1.0")

  compileOnly("org.codehaus.groovy:groovy-all:3.0.25")

  implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
  implementation("org.glassfish.jaxb:jaxb-runtime:4.0.5")
  implementation("com.sun.xml.bind:jaxb-core:4.0.5")

  testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
  testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
}

tasks.register("download") {
  doFirst {
    if (!file("build/schemas/svg.dtd").exists()) {
      file("$buildDir/schemas").mkdirs()
      file("build/schemas/svg.dtd").text =
          new URL("https://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat-20030114.dtd").text
    }
    new Converter().convert(buildDir)
  }
}

tasks.register("xjcGenerate", JavaExec) {
  description = "Generate Java classes from XML schema"
  group = "build"

  dependsOn("download")

  classpath = configurations.xjcTool
  mainClass = "com.sun.tools.xjc.Driver"

  def outputDir = file("build/generated/sources/xjc/java/main")
  def schemaDir = file("build/schemas")
  def bindingDir = file("src/main/jaxb")

  inputs.dir(schemaDir).withPropertyName("schemaDir")
  inputs.dir(bindingDir).withPropertyName("bindingDir").optional()
  outputs.dir(outputDir)

  args = [
      "-d", outputDir.absolutePath,
      "-quiet",
      "-extension",
      "-Xfluent-api",
      "-Xannotate"
  ]

  if (bindingDir.exists()) {
    args += ["-b", bindingDir.absolutePath]
  }

  args += schemaDir.absolutePath

  doFirst {
    outputDir.mkdirs()
  }

  doLast {
    new GroovyNewifyBuilder().createFile(buildDir)
  }
}

compileJava.dependsOn("xjcGenerate")
compileKotlin.dependsOn("xjcGenerate")
tasks.named("sourcesJar").configure { dependsOn("xjcGenerate") }
compileTestGroovy.doFirst {
  copy {
    from("build/classes/kotlin/test")
    into("build/classes/java/test")
  }
}

javadoc {
  options.addStringOption("Xdoclint:none", "-quiet")
}

test {
  useJUnitPlatform()
}

kotlin {
  jvmToolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

waena {
  publishMode.set(WaenaExtension.PublishMode.Central)
}
